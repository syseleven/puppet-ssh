#!/usr/bin/env bash

##
## WARNING: This file is auto-generated by puppet!
## WARNING: To change it, edit the file in <%= file[/.*\/(.*?\/templates\/.*)/, 1] %>
##

##
## config
##
nrpe_msg_ok=''
nrpe_msg_cr=''
nrpe_txt_cr=''
nrpe_s_return=''
nrpe_i_return=3
user=''

##
## configure users
##
<% (scope['ssh::server_sftp_chroots'].keys.flatten.join(':')+':'+sftp_logins.flatten.join(':')).split(':').sort.uniq.each do |username| -%>
user="${user} <%= ipaddress_external %>|<%= username %>|/var/nagios/home/.ssh/id_rsa|5"
<% end -%>

##
## loop user
##
for u in ${user}; do
  ##
  ## extract data
  ##
  u_host="$(printf '%s\n' "${u}" | cut -d'|' -f1)"
  u_name="$(printf '%s\n' "${u}" | cut -d'|' -f2)"
  u_key="$(printf '%s\n' "${u}" | cut -d'|' -f3)"
  u_timeout="$(printf '%s\n' "${u}" | cut -d'|' -f4)"

  ##
  ## execute check
  ##
  response="$(/usr/lib64/nagios/plugins/check_sftp_login.py -H${u_host} -U${u_name} -k${u_key} -t${u_timeout})"
  returncode=${?}

  ##
  ## update result
  ##
  if [ ${returncode} -eq 0 ]; then
    nrpe_msg_ok="${nrpe_msg_ok}${u_name}, "
  else
    nrpe_msg_cr="${nrpe_msg_cr}${u_name}, "
    nrpe_txt_cr="${nrpe_txt_cr}${u_name}: $(printf '%s\n' "${response}" | sed 's#^[a-zA-Z0-9]\+: ##g;'),\n"
  fi
done

##
## build return message
##
if [ -z "${nrpe_msg_ok}" -a -z "${nrpe_msg_cr}" ]; then
  printf 'WARNING: cannot find any response\n'
  exit 1
fi
if [ -n "${nrpe_msg_ok}" ]; then
  if [ $(printf '%s\n' "${nrpe_msg_ok}" | grep -o ',' | wc -l) -eq 1 ]; then
    nrpe_msg_ok="the sFTP login $(printf '%s\n' "${nrpe_msg_ok}" | sed 's#, $##g;') is working normal"
  else
    nrpe_msg_ok="the sFTP logins $(printf '%s\n' "${nrpe_msg_ok}" | sed -r 's#, $##g;s#(.*),#\1 and#g;') are working normal"
  fi
fi
if [ -n "${nrpe_msg_cr}" ]; then
  if [ $(printf '%s\n' "${nrpe_msg_cr}" | grep -o ',' | wc -l) -eq 1 ]; then
    nrpe_msg_cr="the sFTP login $(printf '%s\n' "${nrpe_msg_cr}" | sed 's#, $##g;') is not usable"
  else
    nrpe_msg_cr="the sFTP logins $(printf '%s\n' "${nrpe_msg_cr}" | sed -r 's#, $##g;s#(.*),#\1 and#g;') are not usable"
  fi
fi
if [ -z "${nrpe_msg_cr}" ]; then
  nrpe_s_return="OK: ${nrpe_msg_ok}"
  nrpe_i_return=0
else
  nrpe_s_return="CRITICAL: ${nrpe_msg_cr}\n${nrpe_txt_cr}"
  nrpe_i_return=2
fi

##
## return result
##
printf '%b' "${nrpe_s_return}"

exit ${nrpe_i_return}
